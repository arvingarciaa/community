{"version":3,"sources":["../../../src/posts/controllers/posts.server.controller.js"],"names":["postControls","list","find","err","res","send","posts","results","listByCategory","category","req","params","listByGroupBelonged","groupBelonged","handle","query","showPublic","listByGroupBelongedAndCategory","listByMyGroups","myGroups","split","$in","listByMyGroupsAndCategory","listByUser","userID","listLengthByUser","count","postsLength","listByUserAndCategory","listOne","id","findById","status","post","result","body","save","updateReactions","findByIdAndUpdate","reactions","removeOne","findByIdAndRemove"],"mappings":"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","file":"posts.server.controller.js","sourcesContent":["import Post from '../models/posts.server.model';\n\nconst postControls = { \n\tlist : (req, res) => {\t// get all posts\n\t\tPost.find((err, results) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ posts: results });\n\t    });\n\t},\n\tlistByCategory : (req, res) => {\t// get posts by category\n\t\tPost.find({category: req.params.category}, (err, results) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ posts: results });\n\t    });\n\t},\n\tlistByGroupBelonged : (req, res) => {\t// get all posts or public posts only by group \n\t\tlet query = {groupBelonged: req.params.handle};\n\n\t\tif (req.query && req.query.showPublic){\n\t\t\tquery.showPublic = req.query.showPublic;\n\t\t}\n\n\t\tPost.find(query, (err, results) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ posts: results });\n\t    });\n\t},\n\tlistByGroupBelongedAndCategory : (req, res) => {\t// get all posts or public posts only by category and group\n\t\tlet query = {groupBelonged: req.params.handle, category: req.params.category};\n\n\t\tif (req.query && req.query.showPublic){\n\t\t\tquery.showPublic = req.query.showPublic;\n\t\t}\n\n\t\tPost.find(query, (err, results) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ posts: results });\n\t    });\n\t},\n\tlistByMyGroups : (req, res) => {\t// get all posts by given groups\n\t\tconst myGroups = req.params.myGroups.split(',');\n\t\tPost.find({groupBelonged: { $in: myGroups}}, (err, results) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ posts: results });\n\t    });\n\t},\n\tlistByMyGroupsAndCategory : (req, res) => {\t// get posts by given groups and category\n\t\tconst myGroups = req.params.myGroups.split(',');\n\n\t\tPost.find({groupBelonged: {$in: myGroups}, category: req.params.category}, (err, results) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ posts: results });\n\t    });\n\t},\n\tlistByUser : (req, res) => {\t// get all public posts by user\n\t\tPost.find({'postedBy._id': req.params.userID, showPublic: true}, (err, results) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ posts: results });\n\t    });\n\t},\n\tlistLengthByUser : (req, res) => {\t// get no. of posts by user\n\t\tPost.find({'postedBy._id': req.params.userID}).count((err, count) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ postsLength: count });\n\t    });\n\t},\n\tlistByUserAndCategory : (req, res) => {\t// get no. of posts by user and category\n\t\tPost.find({'postedBy._id': req.params.userID, category: req.params.category, showPublic: true}, (err, results) => {\n\t        if (err) { return (err); }\n\n\t        res.send({ posts: results });\n\t    });\n\t},\n\tlistOne : (req, res) => {\t// get one post\n\t\tconst id = req.params.id;\n\n\t\tPost.findById(id, (err, result) => {\n\t\t\tif (err) { \n\t\t\t\treturn (err);  \n\t\t\t} else if (result === null) {\n\t\t\t\treturn res.status(404).send('Post not found!');\n\t\t\t}\n\t\t\t\n\t\t\tres.send({post: result});\n\t\t});\n\t},\n\tpost : (req, res) => {\t// add one post\n\t\tconst post = new Post(req.body);\n\t\tpost.save((err) => {\n\t\t\tif (err) { return (err); }\n\n\t\t\tres.send('Post saved.');\n\t\t});\n\t},\n\tupdateReactions : (req, res) => {\t// modify the reactions of a post\n\t\tconst id = req.params.id;\n\n\t\tPost.findByIdAndUpdate(id, { reactions: req.body.reactions }, (err) => {\n\t\t\tif (err) { return (err); }\n\n\t\t\tres.send(\"Post updated.\");\n\t\t});\n\t},\n\tremoveOne : (req, res) => {\t// delete one post\n\t\tconst id = req.params.id;\n\n\t\tPost.findByIdAndRemove(id, (err, result) => {\n\t\t\tif (err) { return (err); }\n\n\t\t\tres.send(\"Post deleted.\");\n\t\t});\n\t}\n}\n\nexport default postControls;\n"]}