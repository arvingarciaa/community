{"version":3,"sources":["../../../src/users/config/users.server.passport.js"],"names":["User","model","use","usernameField","findOne","email","username","err","done","user","validPassword","password","message"],"mappings":"aAAA,mM,wEAGA,GAAMA,MAAO,mBAASC,KAAT,CAAe,MAAf,CAAb,CAEA,mBAASC,GAAT,CAAa,4BAAkB,CAC3BC,cAAe,OADY,CAAlB,CAGX,eAA8B,CAC5BH,KAAKI,OAAL,CAAa,CAAEC,MAAOC,CAAT,CAAb,CAAkC,aAAe,OAC3CC,EAD2C,CAC7BC,EAAKD,CAAL,CAD6B,CAG1CE,CAH0C,CAS1CA,EAAKC,aAAL,CAAmBC,CAAnB,CAT0C,CAexCH,EAAK,IAAL,CAAWC,CAAX,CAfwC,CAUtCD,EAAK,IAAL,IAAkB,CACvBI,QAAS,oBADc,CAAlB,CAVsC,CAItCJ,EAAK,IAAL,IAAkB,CACvBI,QAAS,gBADc,CAAlB,CAYV,CAhBD,CAiBD,CArBU,CAAb,C","file":"users.server.passport.js","sourcesContent":["import passport from 'passport';\nimport {Strategy as LocalStrategy} from 'passport-local';\nimport mongoose from 'mongoose';\nconst User = mongoose.model('User');\n\npassport.use(new LocalStrategy({\n    usernameField: 'email'\n  },\n  (username, password, done) => {\n    User.findOne({ email: username }, (err, user) => {\n      if (err) { return done(err); }\n      // Return if user not found in database\n      if (!user) {\n        return done(null, false, {\n          message: 'User not found'\n        });\n      }\n      // Return if password is wrong\n      if (!user.validPassword(password)) {\n        return done(null, false, {\n          message: 'Incorrect Password'\n        });\n      }\n      // If credentials are correct, return the user object\n      return done(null, user);\n    });\n  }\n));"]}