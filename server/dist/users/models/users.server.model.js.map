{"version":3,"sources":["../../../src/users/models/users.server.model.js"],"names":["UserSchema","Schema","email","type","String","unique","required","hash","salt","name","Object","isAdmin","Boolean","photo","dateJoined","sex","birthdate","contactNumber","country","location","about","groupsJoined","Array","methods","setPassword","randomBytes","toString","pbkdf2Sync","password","validPassword","generateJwt","Date","expiry","setDate","getDate","sign","_id","exp","parseInt","getTime","model"],"mappings":"oEAAA,6O,wEAIA,GAAIA,YAAa,mBAASC,MAAT,CAAgB,CAChCC,MAAO,CACNC,KAAMC,MADA,CAENC,SAFM,CAGNC,WAHM,CADyB,CAMhCC,KAAMH,MAN0B,CAOhCI,KAAMJ,MAP0B,CAQhCK,KAAM,CACLN,KAAMO,MADD,CAELJ,WAFK,CAR0B,CAYhCK,QAAS,CACRR,KAAMS,OADE,CAERN,WAFQ,CAZuB,CAgBhCO,MAAOH,MAhByB,CAiBhCI,WAAY,CACXX,KAAMC,MADK,CAEXE,WAFW,CAjBoB,CAqBhCS,IAAK,CACJZ,KAAMC,MADF,CAEJE,WAFI,CArB2B,CAyBhCU,UAAW,CACVb,KAAMC,MADI,CAEVE,WAFU,CAzBqB,CA6BhCW,cAAeb,MA7BiB,CA8BhCc,QAAS,CACRf,KAAMC,MADE,CAERE,WAFQ,CA9BuB,CAkChCa,SAAU,CACThB,KAAMC,MADG,CAETE,WAFS,CAlCsB,CAsChCc,MAAOhB,MAtCyB,CAuChCiB,aAAcC,KAvCkB,CAAhB,CAAjB,CA0CAtB,WAAWuB,OAAX,CAAmBC,WAAnB,CAAiC,WAAmB,CAClD,KAAKhB,IAAL,CAAY,iBAAOiB,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CADsC,CAElD,KAAKnB,IAAL,CAAY,iBAAOoB,UAAP,CAAkBC,CAAlB,CAA4B,KAAKpB,IAAjC,KAA6C,EAA7C,EAAiDkB,QAAjD,CAA0D,KAA1D,CACb,C,CAED1B,WAAWuB,OAAX,CAAmBM,aAAnB,CAAmC,WAAmB,CACpD,GAAM,GAAO,iBAAOF,UAAP,CAAkBC,CAAlB,CAA4B,KAAKpB,IAAjC,KAA6C,EAA7C,EAAiDkB,QAAjD,CAA0D,KAA1D,CAAb,CACA,MAAO,MAAKnB,IAAL,GAAcA,CACtB,C,CAEDP,WAAWuB,OAAX,CAAmBO,WAAnB,CAAiC,UAAW,CAC1C,GAAI,GAAS,GAAIC,KAAjB,CAGA,MAFAC,GAAOC,OAAP,CAAeD,EAAOE,OAAP,GAAmB,CAAlC,CAEA,CAAO,uBAAIC,IAAJ,CAAS,CACdC,IAAK,KAAKA,GADI,CAEdlC,MAAO,KAAKA,KAFE,CAGdO,KAAM,KAAKA,IAHG,CAIdE,QAAS,KAAKA,OAJA,CAKd0B,IAAKC,SAASN,EAAOO,OAAP,MAAT,CALS,CAAT,CAMJ,WANI,CAOR,C,iBAEc,mBAASC,KAAT,CAAe,MAAf,CAAuBxC,UAAvB,C","file":"users.server.model.js","sourcesContent":["import mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\n\nlet UserSchema = mongoose.Schema({\n\temail: {\n\t\ttype: String,\n\t\tunique: true,\n\t\trequired: true\n\t},\n\thash: String,\n\tsalt: String,\n\tname: {\n\t\ttype: Object,\n\t\trequired: true\n\t},\n\tisAdmin: {\n\t\ttype: Boolean,\n\t\trequired: true\n\t},\n\tphoto: Object,\n\tdateJoined: {\n\t\ttype: String,\n\t\trequired: true\n\t},\n\tsex: {\n\t\ttype: String,\n\t\trequired: true\n\t},\n\tbirthdate: {\n\t\ttype: String,\n\t\trequired: true\n\t},\n\tcontactNumber: String,\n\tcountry: {\n\t\ttype: String,\n\t\trequired: true\n\t},\n\tlocation: {\n\t\ttype: String,\n\t\trequired: true\n\t},\n\tabout: String,\n\tgroupsJoined: Array\n});\n\nUserSchema.methods.setPassword = function(password) {\n  this.salt = crypto.randomBytes(16).toString('hex');\n  this.hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');\n}\n\nUserSchema.methods.validPassword = function(password) {\n  const hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');\n  return this.hash === hash;\n}\n\nUserSchema.methods.generateJwt = function() {\n  let expiry = new Date();\n  expiry.setDate(expiry.getDate() + 7);\n\n  return jwt.sign({\n    _id: this._id,\n    email: this.email,\n    name: this.name,\n    isAdmin: this.isAdmin,\n    exp: parseInt(expiry.getTime() / 1000)\n  }, \"MY_SECRET\"); \n}\n\nexport default mongoose.model('User', UserSchema);"]}