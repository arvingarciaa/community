{"version":3,"sources":["../../../src/users/controllers/users-authentication.server.controller.js"],"names":["User","model","userAuthControls","register","req","body","userFormData","user","setPassword","password","enteredKey","process","env","ADMIN_REG_ACCESS_HASH","pbkdf2Sync","ADMIN_REG_ACCESS_SALT","toString","res","status","json","message","save","err","generateJwt","token","login","authenticate","info","allowAdminRegistration","enteredHash"],"mappings":"oEAAA,6N,wEAGA,GAAIA,MAAO,mBAASC,KAAT,CAAe,MAAf,CAAX,CAEMC,iBAAmB,CACxBC,SAAW,sBAAc,CACxB,GAAI,GAAO,GAAIH,KAAJ,CAASI,EAAIC,IAAJ,CAASC,YAAlB,CAAX,CADwB,MAExBC,GAAKC,WAAL,CAAiBJ,EAAIC,IAAJ,CAASI,QAA1B,CAFwB,CAGpBL,EAAIC,IAAJ,CAASK,UAHW,EAInBC,QAAQC,GAAR,CAAYC,qBAAZ,GAAsC,iBAAOC,UAAP,CAAkBV,EAAIC,IAAJ,CAASK,UAA3B,CAAuCC,QAAQC,GAAR,CAAYG,qBAAnD,KAAgF,EAAhF,EAAoFC,QAApF,CAA6F,KAA7F,CAJnB,KAKtBC,GAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAACC,QAAS,qBAAV,CAArB,CALsB,KAUxBb,GAAKc,IAAL,CAAU,WAAS,CAClB,GAAIC,CAAJ,CAAW,MAAQA,EAAR,CAEX,GAAI,GAAQf,EAAKgB,WAAL,EAAZ,CACAN,EAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,MAASK,CAAV,CAArB,CACA,CALD,CAMA,CAjBuB,CAkBxBC,MAAQ,mBAAc,CACpB,mBAASC,YAAT,CAAsB,OAAtB,CAA+B,eAAqB,CAElD,GAAIJ,CAAJ,CAEE,WADAL,GAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,CAArB,CACA,CAIF,GAAGf,CAAH,CAAQ,CACN,GAAI,GAAQA,EAAKgB,WAAL,EAAZ,CACAN,EAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,MAAUK,CAAX,CAArB,CACD,CAHD,IAKEP,GAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,CAArB,CAEH,CAfD,EAeGvB,CAfH,CAeQa,CAfR,CAgBD,CAnCuB,CAoCxBW,uBAAwB,oCAAc,CACrC,GAAM,GAAc,iBAAOd,UAAP,CAAkBV,EAAIC,IAAJ,CAASK,UAA3B,CAAuCC,QAAQC,GAAR,CAAYG,qBAAnD,KAAgF,EAAhF,EAAoFC,QAApF,CAA6F,KAA7F,CAApB,CACIa,IAAgBlB,QAAQC,GAAR,CAAYC,qBAFK,CAGpCI,EAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,YAHoC,CAKpCF,EAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,YAED,CA3CuB,CAFzB,C,gBAgDejB,gB","file":"users-authentication.server.controller.js","sourcesContent":["import passport from 'passport';\nimport mongoose from 'mongoose';\nimport crypto from 'crypto';\nlet User = mongoose.model('User');\n\nconst userAuthControls = { \n\tregister : (req, res) => {\t// add user\n\t\tlet user = new User(req.body.userFormData);\n\t\tuser.setPassword(req.body.password);\n\t\tif (req.body.enteredKey){\n\t\t\tif (process.env.ADMIN_REG_ACCESS_HASH !== crypto.pbkdf2Sync(req.body.enteredKey, process.env.ADMIN_REG_ACCESS_SALT, 1000, 64).toString('hex')){\n\t\t\t\tres.status(401).json({message: 'Invalid Access Key!'});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tuser.save((err) => {\n\t\t\tif (err) { return (err); }\n\n\t\t\tlet token = user.generateJwt();\n\t\t\tres.status(200).json({\"token\": token});\n\t\t});\n\t},\n\tlogin : (req, res) => {\t// login user\n\t  passport.authenticate('local', (err, user, info) => {\n\t    // If Passport throws/catches an error\n\t    if (err) {\n\t      res.status(404).json(err);\n\t      return;\n\t    }\n\n\t    // If a user is found\n\t    if(user){\n\t      let token = user.generateJwt();\n\t      res.status(200).json({\"token\" : token});\n\t    } else {\n\t      // If user is not found\n\t      res.status(401).json(info);\n\t    }\n\t  })(req, res);\n\t},\n\tallowAdminRegistration: (req, res) => {\t// check valid admin reg key\n\t\tconst enteredHash = crypto.pbkdf2Sync(req.body.enteredKey, process.env.ADMIN_REG_ACCESS_SALT, 1000, 64).toString('hex');\n\t\tif (enteredHash === process.env.ADMIN_REG_ACCESS_HASH){\n\t\t\tres.status(200).json({\"allow\": true});\n\t\t} else{\n\t\t\tres.status(401).json({\"allow\": false});\n\t\t}\n\t}\n}\n\nexport default userAuthControls;\n"]}